{"version":3,"sources":["components/keyboard/media/click.mp3","components/display/index.tsx","components/keyboard/index.tsx","Calc.tsx","serviceWorker.js","index.tsx","reducers/index.ts"],"names":["module","exports","__webpack_require__","p","connect","state","display","props","dispatch","react_default","a","createElement","className","onClick","type","digits","operators","sound","Audio","require","addSymbol","symbol","clear","result","plusMinus","contentCreation","content","map","value","key","clickHandler","bind","e","target","tagName","play","Calc","cancelSelect","onMouseDown","onSelect","components_display","keyboard","Boolean","window","location","hostname","match","store","createStore","reducer","ReactDOM","render","es","src_Calc","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","initialState","arguments","length","undefined","action","prevSymbol","slice","Number","isInteger","search","replace","expression","res","eval","_unused","alert","d","__webpack_exports__"],"mappings":"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","file":"static/js/main.1c022568.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click.ce418eca.mp3\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './style.css';\r\n\r\ninterface Param {\r\n    type: string;\r\n}\r\ninterface State {\r\n\tdisplay: string;\r\n}\r\ninterface DisplayProps {\r\n\tdispatch: (action: Param) => void;\r\n\tdisplay: string;\r\n} \r\n\r\nconst Display = (props: DisplayProps) => {\r\n\tconst {dispatch, display} = props;\r\n\r\n\tconst clickHandler = () => {\r\n\t\tdispatch({type: \"BACKSPACE\"});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<p className=\"display\">{display}</p>\r\n\t\t\t<div className=\"backspace\" \r\n\t\t\t\tonClick={clickHandler}>‚Üê</div>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = (state: State) => {\r\n\treturn {display: state.display}\r\n};\r\n\r\nexport default connect(mapStateToProps)(Display);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, \".\", 9, \"+/-\"];\r\nconst operators = [\"+\", \"-\", \"*\", \"/\", \"(\", \")\", \"=\", \"C\"];\r\nconst sound = new Audio(require(\"./media/click.mp3\"));\r\n\r\ninterface KeyboardProps {\r\n\tplusMinus: () => void;\r\n\tresult: () => void;\r\n\tclear: () => void;\r\n\taddSymbol: (symbol: string) => void;\r\n}\r\n\r\ninterface Action {\r\n\ttype: string;\r\n\tsymbol?: string;\r\n}\r\n\r\nconst Keyboard = (props: KeyboardProps) => {\r\n\r\n\tconst soundClick = (e: any) => {\r\n\t\tif ( !(e.target.tagName === \"BUTTON\") ) return;\r\n\t\tsound.play();\r\n\t}\r\n\r\n\tconst contentCreation = (content: any[]) => {\r\n\t\tconst {plusMinus, result, clear, addSymbol} = props;\r\n\t\tconst res = content.map( (value, key) => {\r\n\t\t\tlet clickHandler;\r\n\t\t\tswitch (value) {\r\n\t\t\t\tcase \"+/-\":\r\n\t\t\t\t\tclickHandler = plusMinus;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"=\":\r\n\t\t\t\t\tclickHandler = result;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"C\":\r\n\t\t\t\t\tclickHandler = clear;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tclickHandler = addSymbol.bind(null,value);\r\n\t\t\t}\r\n\t\t\treturn (\r\n\t\t\t\t<button key={key} onClick={clickHandler}>{value}</button>\r\n\t\t\t)\r\n\t\t});\r\n\t\treturn res;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"calcButton\" onClick={soundClick}>\r\n\t\t\t<div className=\"digits\">\r\n\t\t\t\t{contentCreation(digits)}\r\n\t\t\t</div>\t\r\n\t\t\t<div className=\"operators\">\r\n\t\t\t\t{contentCreation(operators)}\r\n\t\t\t</div>\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: (action: Action) => void) => {\r\n\treturn{\r\n    \taddSymbol: (symbol: string) => {\r\n    \t\tdispatch({\r\n\t\t\t    type: 'ADD SYMBOL',\r\n\t\t\t    symbol\r\n\t\t    })\r\n    \t},\r\n    \tclear: () => {\r\n\t\t    dispatch({\r\n\t\t\t    type: 'CLEAR'\r\n\t\t    })\r\n    \t},\r\n    \tresult: () => {\r\n\t\t    dispatch({\r\n\t\t\t    type: 'RESULT'\r\n\t\t    })\r\n\t\t},\r\n    \tplusMinus: () => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"PLUSMINUS\"\r\n\t\t\t})\r\n    \t}\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Keyboard);","import React from 'react';\r\nimport Display from './components/display';\r\nimport KeyBoard from './components/keyboard';\r\nimport './calc.css';\r\n\r\nconst Calc = () => {\r\n\tconst cancelSelect = () => false;\r\n\r\n\treturn (\r\n\t\t<div className=\"calc\" \r\n\t\t\tonMouseDown={cancelSelect} \r\n\t\t\tonSelect={cancelSelect}>\r\n\t\t\t<h1>**Calculator**</h1>\r\n\t\t\t<Display />\r\n\t\t\t<KeyBoard />\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Calc;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore} from 'redux';\r\nimport reducer from './reducers';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport './index.css';\r\nimport Calc from './Calc';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst initialState = {\r\n\tdisplay: \"\"\r\n};\r\nconst store = createStore(reducer, initialState);\r\n\r\nReactDOM.render((\r\n\t<Provider store={store} >\r\n\t\t<Calc />\r\n\t</ Provider>\r\n\t), document.getElementById('root'));\r\n\r\nserviceWorker.unregister();","interface State {\r\n\tdisplay: string;\r\n}\r\n// need to fix !Number.isInteger(+symbol) if set type action as Action\r\ninterface Action {\r\n\ttype: string;\r\n\tsymbol?: string;\r\n}\r\n\r\nexport default function reducer (initialState: State = {display: \"\"}, action: any) {\r\n\tlet display = initialState.display;\r\n\r\n\tswitch (action.type) {\r\n\t\tcase \"ADD SYMBOL\": \r\n\t\t\tconst symbol = action.symbol,\r\n\t\t\t\tprevSymbol = display.slice(-1);\r\n\t\t\tif (display===\"\" && !Number.isInteger(+symbol)) return initialState;\r\n\t\t\tif ( !Number.isInteger(+symbol) && !Number.isInteger(+prevSymbol)) {\r\n\t\t\t\tdisplay = display.slice(0,-1);\r\n\t\t\t}\r\n\t\t\treturn {display: display + action.symbol};\r\n\r\n\t\tcase \"REMOVE LAST SYMBOL\":\r\n\t\t\treturn {display: initialState.display.slice(0,-1)};\r\n\r\n\t\tcase \"CLEAR\":\r\n\t\t\treturn {display: \"\"};\r\n\r\n\t\tcase \"BACKSPACE\":\r\n\t\t\tif (initialState.display === \"\") return initialState;\r\n\t\t\treturn {display: initialState.display.slice(0, -1)};\r\n\r\n\t\tcase \"PLUSMINUS\":\r\n\t\t\tif (display.search(/\\(-\\d+$/) + 1) {\r\n\t\t\t\tdisplay = display.replace(/\\(-(\\d+$)/, \"$1\");\r\n\t\t\t\treturn {display: display};\r\n\t\t\t}\r\n\t\t\tdisplay = display.replace(/(\\d+)$/,\"(-$1\");\r\n\t\t\treturn {display: display};\r\n\r\n\t\tcase \"RESULT\":\r\n\t\t\tlet expression = initialState.display;\r\n\t\t\tlet res;\r\n\t\t\tif (!Number.isInteger(+expression.slice(-1))) {\r\n\t\t\t\texpression = expression.slice(0, -1);\r\n\t\t\t}\r\n\t\t\tif ( expression.search(/\\([^\\)]*$/) + 1) expression = expression + \")\";\r\n\t\t\ttry {res = eval(expression) } catch {\r\n\t\t\t\talert(\"The expresion isn't correct!\");\r\n\t\t\t\tres = expression;\r\n\t\t\t};\r\n\t\t\treturn {display: \"\" + res};\r\n\r\n\t\tdefault:\r\n\t\t\treturn initialState;\r\n\t}\r\n}"],"sourceRoot":""}